const TelegramApi = require('node-telegram-bot-api');
const { google } = require('googleapis');
const { GoogleAuth } = require('google-auth-library');
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];
require('dotenv').config();

const token = process.env.TGTOKEN;
const spreadsheetId = process.env.spreadsheetTOKEN;
const googleCredentials = JSON.parse(process.env.googleCREDENTIALS);

const bot = new TelegramApi(token, { polling: true });

const btns = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{ text: '–¢–∞–∫', callback_data: 'Yes' }, { text: '–ù—ñ', callback_data: 'No' }]
        ]
    })
}

let name = {};
let eventsArr;
let dateSheets;
let place;
let latitude;
let longitude;
let clubsLocations;


const start = () => {
    bot.setMyCommands([{ command: '/check_in', description: '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É –≥–æ—Å—Ç–µ–π' }, { command: '/feedback', description: '–°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É/–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª' }, { command: '/location', description: '–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –º—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–ª—É–±—ñ–≤' }, { command: '/photos', description: '–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –∑ –≤–µ—á—ñ—Ä–æ–∫' }])
    bot.on('message', async msg => {
        let text = msg.text;
        let chatId = msg.chat.id;
        let user = await readUser(chatId);
        if (!user) {
            await pasteUser(msg.from.username ? msg.from.username : msg.from.last_name ? msg.from.first_name + ' ' + msg.from.last_name : msg.from.first_name, chatId)
        }
        if (text === '/check_in') {
            await bot.sendMessage(chatId, '–í—ñ—Ç–∞—î–º–æ —É KA√èF Bot! –ó–∞—Ä–∞–∑ —Ç–∏ –º–æ–∂–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏ —Å–µ–±–µ —Ç–∞ —Å–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ –Ω–∞ –≤–µ—á—ñ—Ä–∫—É —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∏–∂–∫—É 5‚Ç¨ –Ω–∞ –≤—Ö—ñ–¥.');
            const dateBtns = await readEvents();
            return bot.sendMessage(chatId, `–í–∏–±–µ—Ä–∏ –±—É–¥—å –ª–∞—Å–∫–∞ –¥–∞—Ç—É –≤–µ—á—ñ—Ä–∫–∏ –Ω–∞ —è–∫—É —Ç–∏ —Ö–æ—Ç—ñ–≤(-–ª–∞) –± –ø—ñ—Ç–∏`, dateBtns);
        }
        if (text === '/start') {
            return bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç. –ù–∞–ø–∏—à–∏ –±—É–¥—å –ª–∞—Å–∫–∞ –∫–æ–º–∞–Ω–¥—É /check_in, —â–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å —É —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π');
        }
        if (text === '/feedback') {
            return bot.sendMessage(chatId, '–ê–±–∏ —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —á–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø–∏—à–∏ —Ä–∞–∑—Ä–æ–±–Ω–∏–∫—É –±–æ—Ç–∞ - @nikita_chernysh');
        }
        if (text === '/location') {
            const clubNamesBtns = await readAllClubsLocation();
            return bot.sendMessage(chatId, `–í–∏–±–µ—Ä–∏ –∫–ª—É–±, —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è —è–∫–æ–≥–æ —Ç–∏ —Ö–æ—á–µ—à –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å.`, clubNamesBtns);
        }
        if (text === '/photos') {
            let photosArr = await readAllPhotos();
            let message = '';
            photosArr.forEach(element => {
                message += element.reduce((prev, next) => prev + ' - ' + next + '\n');
            })
            return bot.sendMessage(chatId, message);
        }
        if (text === process.env.specialcommand) {
            let allUsers = await readAllUsers();
            allUsers.forEach(async el => await bot.sendMessage(el[0], await readNewsLetterText()));
        }
    })

    bot.on('callback_query', async msg => {
        let data = msg.data;
        let chatId = msg.message.chat.id
        if (data === '–ü–æ–¥—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î :(') {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendMessage(chatId, `–°–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ /check_in, —Å–∫–æ—Ä–æ —â–æ—Å—å —Ç–æ—á–Ω–æ –∑‚Äò—è–≤–∏—Ç—å—Å—è!`);
        }
        if (data === 'Yes') {
            await sheetsAutomate(name[chatId], msg.from.username ? msg.from.username : msg.from.last_name ? msg.from.first_name + ' ' + msg.from.last_name : msg.from.first_name);
            delete name[chatId];
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendMessage(chatId, '–î—è–∫—É—é, —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é. –ß–µ–∫–∞—é –Ω–∞ —Ç–µ–±–µ (–≤–∞—Å) ' + dateSheets + ' –≤ ' + place + '\n' + '\n' + '–¢–∞–∫–æ–∂ –Ω–µ –∑–∞–±—É–≤–∞–π –ø—Ä–æ –Ω–∞—à <a href="https://t.me/+SM1ykEKtE6RkYTcy">—á–∞—Çüòé</a>', { parse_mode: 'HTML' })
            await bot.sendLocation(chatId, latitude, longitude);
        } else if (data === 'No') {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏ —â–µ —Ä–∞–∑ –ø—Ä—ñ–∑–≤–∏—â–µ(–∞) —Ç–∞ —ñ–º‚Äò—è(—ñ–º–µ–Ω–∞)`);
            await ask(chatId);
        } else {
            eventsArr && eventsArr.forEach(async element => {
                if (data === element[0]) {
                    place = element[1];
                    latitude = element[2];
                    longitude = element[3]
                    dateSheets = data;
                    await bot.deleteMessage(chatId, msg.message.message_id);
                    await bot.sendMessage(chatId, `–¢–∏ –≤–∏–±—Ä–∞–≤(-–ª–∞) ${data}`);
                    await bot.sendMessage(chatId, `–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–º –º–µ–Ω—ñ —Å–≤–æ—î –ø—Ä–∏–∑–≤—ñ—â–µ —Ç–∞ —ñ–º‚Äò—è —É –ø–æ—Ä—è–¥–∫—É {–ü–†–ò–ó–í–Ü–©–ï –Ü–ú‚Äò–Ø}. –Ø–∫—â–æ —Ç–∏ –∑–∞–ø–∏—Å—É—î—à –¥–µ–∫—ñ–ª—å–∫–∞ –ª—é–¥–µ–π —Ç–æ–¥—ñ –ø–∏—à–∏ —ó—Ö –ø—Ä–∏–∑–≤—ñ—â–∞ —Ç–∞ —ñ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É.`);
                    await bot.sendMessage(chatId, `–ü—Ä–∏–∫–ª–∞–¥:
–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω, –î–æ—Ä–æ—à–µ–Ω–∫–æ –°–µ—Ä–≥—ñ–π, –ö–æ–∑–∞–∫–æ–≤–∞ –ù–∞—Å—Ç—è`);
                    await ask(chatId);
                }
            });
        }
        clubsLocations && clubsLocations.forEach(async element => {
            if (data === element[0]) {
                await bot.deleteMessage(chatId, msg.message.message_id);
                await bot.sendMessage(chatId, `–¢–∏ –≤—ã–±—Ä–∞–≤(-–ª–∞) ${data}`);
                await bot.sendLocation(chatId, element[1], element[2]);
            }
        })
    })
}

async function ask(chatId) {
    bot.once('message', async message => {
        if ((message.text === '/start' || message.text === '/check_in' || message.text === '/feedback' || message.text === '/location' || message.text === '/photos') && message.from.id === chatId) {
            await bot.sendMessage(chatId, '–¢–∏ –Ω–∞–ø–∏—Å–∞–≤(-–ª–∞) –∫–æ–º–∞–Ω–¥—É, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–ø–∏—à–∏ /check_in, —â–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å —É —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π –∑–∞–Ω–æ–≤–æ');
            return;
        }
        if (chatId === message.chat.id) {
            let checkInTxt = message.text;
            name[message.from.id] = checkInTxt;
            await bot.sendMessage(chatId, `–¢–∏ —Ö–æ—á–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏ —É —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π ${name[message.from.id]}?`, btns);
        } else {
            await ask(chatId)
        }
    })
}

async function sheetsAutomate(name, username) {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    await sheets.spreadsheets.values.append({
        auth,
        spreadsheetId,
        range: `${dateSheets}!A:A`,
        valueInputOption: 'USER_ENTERED',
        resource: {
            values: name && name.split(', ').map(el => [el, username])
        }
    })
}

async function readEvents() {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    let event = await sheets.spreadsheets.values.get({
        auth,
        spreadsheetId,
        range: 'Events'
    })

    eventsArr = event.data.values || ['–ü–æ–¥—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î :('];
    const dateBtns = {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                eventsArr[0] === '–ü–æ–¥—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î :(' ? [{ text: eventsArr[0], callback_data: eventsArr[0] }] : eventsArr.map(el => ({ text: el[0], callback_data: el[0] }))
            ]
        })
    }
    return dateBtns;
}

async function readAllClubsLocation() {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    let event = await sheets.spreadsheets.values.get({
        auth,
        spreadsheetId,
        range: 'All clubs'
    })

    clubsLocations = event.data.values
    const clubNamesBtns = {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                clubsLocations.map(el => ({ text: el[0], callback_data: el[0] }))
            ]
        })
    }
    return clubNamesBtns;
}

async function readAllPhotos() {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    let event = await sheets.spreadsheets.values.get({
        auth,
        spreadsheetId,
        range: 'Photos'
    })
    return event.data.values;
}

async function readUser(chatId) {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    let event = await sheets.spreadsheets.values.get({
        auth,
        spreadsheetId,
        range: 'Users'
    })
    let chatIds = event.data.values.map(el => el[0]);
    return chatIds.find(elem => elem === chatId.toString());
}

async function pasteUser(username, chatId) {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    await sheets.spreadsheets.values.append({
        auth,
        spreadsheetId,
        range: `Users!A:A`,
        valueInputOption: 'USER_ENTERED',
        resource: {
            values: [[chatId, username]]
        }
    })
}

async function readAllUsers() {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    let event = await sheets.spreadsheets.values.get({
        auth,
        spreadsheetId,
        range: 'Users!A:A'
    })
    return event.data.values;
}

async function readNewsLetterText() {
    const auth = new GoogleAuth({
        credentials: googleCredentials,
        scopes: SCOPES
    });
    const client = await auth.getClient();
    const sheets = await google.sheets({ version: 'v4', auth: client });
    let event = await sheets.spreadsheets.values.get({
        auth,
        spreadsheetId,
        range: 'News Letter Text!A1'
    })
    return event.data.values[0][0];
}

start();

